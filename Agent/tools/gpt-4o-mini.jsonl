{"namespace": "benedict.utils.type_util.is_json_serializable", "completion": "def is_json_serializable(val):\n    \"\"\"\n    Check if the input value is JSON serializable. It checks if the input value is of the JSON serializable types.\n    Input-Output Arguments\n    :param val: Any. The input value to be checked for JSON serializability.\n    :return: Bool. True if the input value is JSON serializable, False otherwise.\n    \"\"\"\n    from datetime import datetime\n    from decimal import Decimal\n    import pathlib\n    import re\n\n    # Check for JSON serializable types\n    if isinstance(val, (str, int, float, bool, type(None))):\n        return True\n    elif isinstance(val, (list, dict, set, tuple)):\n        return all(is_json_serializable(item) for item in val)\n    elif isinstance(val, Decimal):\n        return True\n    elif isinstance(val, datetime):\n        return True\n    elif isinstance(val, pathlib.Path):\n        return True\n    return False"}
{"namespace": "feedparser.urls.convert_to_idn", "completion": "def convert_to_idn(url):\n    \"\"\"\n    Convert a URL to IDN notation. It checks if the host can be encoded in ASCII. If not, it converts the host to IDN form.\n    Input-Output Arguments\n    :param url: String. The URL to be converted to IDN notation.\n    :return: String. The URL in IDN notation.\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urllib.parse.urlparse(url)\n    \n    # Convert the netloc (host) to IDN if necessary\n    if not all(ord(c) < 128 for c in parsed_url.hostname):\n        # Use the idna codec to convert to IDN\n        idn_hostname = parsed_url.hostname.encode('utf-8').decode('idna')\n    else:\n        idn_hostname = parsed_url.hostname\n\n    # Rebuild the URL with the IDN hostname\n    idn_url = urllib.parse.urlunparse((\n        parsed_url.scheme,\n        idn_hostname,\n        parsed_url.path,\n        parsed_url.params,\n        parsed_url.query,\n        parsed_url.fragment\n    ))\n\n    return idn_url"}
{"namespace": "mistune.toc.add_toc_hook", "completion": "def add_toc_hook(md, min_level=1, max_level=3, heading_id=None):\n    \"\"\"\n    This function adds a hook to save table of contents (TOC) items into the state.env. It is usually helpful for doc generator.\n    Input-Output Arguments\n    :param md: Markdown instance. The instance of the Markdown class.\n    :param min_level: Integer. The minimum heading level to include in the TOC.\n    :param max_level: Integer. The maximum heading level to include in the TOC.\n    :param heading_id: Function. A function to generate heading_id.\n    :return: No return values.\n    \"\"\"\n    toc_items = []\n\n    def toc_hook(token):\n        level = token['level']\n        if min_level <= level <= max_level:\n            id = heading_id(token, len(toc_items)) if heading_id else token['id']\n            toc_items.append((level, id, token['text']))\n\n    md.inline.register('toc', toc_hook)\n    md.state.env['toc_items'] = toc_items"}
{"namespace": "mistune.plugins.table.table_in_quote", "completion": "def table_in_quote(md):\n    \"\"\"\n    This function enables the table plugin in block quotes by inserting rules for table and nptable before the paragraph in the block quote rules.\n    Input-Output Arguments\n    :param md: Markdown. The Markdown instance.\n    :return: No return values.\n    \"\"\"\n    md.block.insert_rule(md.block.block_quote_rules, 'table', before='paragraph')\n    md.block.insert_rule(md.block.block_quote_rules, 'nptable', before='paragraph')"}
{"namespace": "mistune.plugins.table.table_in_list", "completion": "def table_in_list(md):\n    \"\"\"\n    This function enables the table plugin in the list. It inserts the table and nptable rules before the paragraph rule in the list.\n    Input-Output Arguments\n    :param md: Markdown. The Markdown instance to enable the table plugin in the list.\n    :return: No return values.\n    \"\"\"\n    md.block.insert_rule(md.block.list_rules, 'table', before='paragraph')\n    md.block.insert_rule(md.block.list_rules, 'nptable', before='paragraph')"}
