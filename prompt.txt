你现在遇到的主要问题是：

### **错误定位和利用信息不足**

1. **节点定位不准确**：
   - 在解析函数调用时，你并没有充分利用 `LSP` 和 `tree-sitter` 提供的详细信息（如函数定义的精确位置、上下文等）来准确定位被调用的函数节点。
   - 而是通过机械的字符串拼凑来生成被调用函数的完整名称，这种方式容易出错，特别是在处理嵌套函数和类方法时。

2. **图结构搜索不足**：
   - 你已经通过 `CONTAINS` 分析构建了一个完整的项目结构图，但在解析函数调用时，你没有充分利用这个图结构来搜索和定位已经存在的节点。
   - 当 `LSP` 返回的定义信息不完整或不包含类上下文时，应该在图结构中通过已知的信息去回溯查找，而不是简单地拼接字符串来猜测节点名称。

### **根本问题**

- **信息整合不足**：`LSP` 和 `tree-sitter` 提供了丰富的位置信息和上下文信息，但这些信息没有被充分整合到调用关系的解析过程中，导致了不准确的节点定位。
- **图搜索缺失**：已有的代码结构图中可能已经包含了所需的节点，但由于没有在图中搜索这些节点，而是依赖于字符串拼凑，导致了错误的调用关系解析。

### **需要解决的问题**

- **在图上正确定位节点**：在解析函数调用时，结合 `LSP` 和 `tree-sitter` 提供的信息，在已有的图结构中搜索和定位节点，避免依赖不可靠的字符串拼凑。
- **灵活匹配和上下文查找**：利用语法树的上下文信息，在图中找到最匹配的节点，即使 `LSP` 返回的定义信息不完整，也能准确建立调用关系。








请结合这个例子说明当前的问题：
我要分析的函数调用：
class MyClass:
    def outer_method(self):
        def inner_function():
            pass

        inner_function()

理论上希望得到的调用关系：
testrepo.module1.MyClass.outer_method 
calls 	
testrepo.module1.MyClass.outer_method.inner_function

首先，我已经进行了一趟CONTAINS 关系的分析，获得了我的所有函数节点，也就是说
以上两个function都是在我的图中已经构建好了：
理论上 我在tree-sitter中得到了被调用名 innner_function （或许还可以有其他的信息）
通过languageserver的find definition 获得了这个被调用函数的实际定义位置；
definition result:[{'uri': 'file:///home/sxj/Desktop/Workspace/CodeQl/gptgraph/testrepo/module1.py', 'range': {'start': {'line': 3, 'character': 12}, 'end': {'line': 3, 'character': 26}}, 'absolutePath': '/home/sxj/Desktop/Workspace/CodeQl/gptgraph/testrepo/module1.py', 'relativePath': 'module1.py'}]

但是现在我还是没有根据以上信息成功的定位到被调用函数的节点。
中间输出如下：

DEBUG:call_parser:Parsing file: ./testrepo/module1.py
DEBUG:call_parser:Module name: testrepo.module1
DEBUG:call_parser:Resolved callee name from tree-sitter: inner_function
INFO:multilspy:{"time": "2024-09-03 14:56:33", "level": "INFO", "caller_file": "jedi_server.py", "caller_name": "start_server", "caller_line": 99, "message": "Starting jedi-language-server server process"}
INFO:multilspy:{"time": "2024-09-03 14:56:33", "level": "INFO", "caller_file": "jedi_server.py", "caller_name": "start_server", "caller_line": 103, "message": "Sending initialize request from LSP client to LSP server and awaiting response"}
DEBUG:call_parser:LSP definition result: [{'uri': 'file:///home/sxj/Desktop/Workspace/CodeQl/gptgraph/testrepo/module1.py', 'range': {'start': {'line': 3, 'character': 12}, 'end': {'line': 3, 'character': 26}}, 'absolutePath': '/home/sxj/Desktop/Workspace/CodeQl/gptgraph/testrepo/module1.py', 'relativePath': 'module1.py'}]
WARNING:call_parser:Callee inner_function not found in the existing graph.